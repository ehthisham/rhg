
<h1>Chapter 17: Dynamic Evaluation</h1>

<h2> summary </h2> 

<p> 
That instrument rating system itself is already complete at the previous chapter. It is this chapter 
Until all the parser to a "broad sense evaluator" verify them as a whole. 
Are eligible to <code> eval </code> <code> Module # module_eval </code> <code> Object # instance_eval </code> Oh, three 
Be. 
</p> 


<h3> <code> eval </code> </h3> 

<p> 
<code> eval </code> already talked about, this is a story from a fine to me. 
</p> 

<p> 
<code> eval </code> to use and run-time string on the spot to compile and evaluate it. 
The return value is the value of the program at the end of the ceremony. 
</p> 

<pre class="emlist"> 
p eval ( "1 + 1") # 2 
</pre> 

<p> 
<code> eval </code> string of variables from the scope of reference. 
</p> 

<pre class="emlist"> 
lvar = 5 
@ ivar = 6 
p eval ( "lvar + @ ivar") # 11 
</pre> 

<p> 
So far readers have read "The scope of the phrase" too easy to read tantivy 
No longer do. For example, the constant "scope" What's going on with you, and 
I do not have to worry about? I do worry about it. Conclusions from it and basically 
To <code> eval </code> outside of the environment take over as his word. 
</p> 

<p> 
The method can define a class definition. 
</p> 

<pre class="emlist"> 
def a 
   eval ( 'class C; def test () puts ( "ok") end end') 
end 

a () # class C and C # test to define 
C.new.test # ok and displayed 
</pre> 

<p> 
In addition, some mentioned in the previous chapter, the second argument <code> Proc </code> to pass in the current system and its environment, 
</p> 

<pre class="emlist"> 
def new_env 
   n = 5 
   This method Proc.new (nil) # environment and returned to the object 
end 

p eval ( 'n * 3', new_env ()) # 15 
</pre> 



<h3> <code> module_eval </code> and <code> instance_eval </code> </h3> 

<p> 
<code> Proc </code> and <code> eval </code> and the second argument to pass the environmental evaluation. <code> module_eval </code> and 
<code> instance_eval </code> is the Limited Edition (or shortcuts). 
<code> module_eval </code> modules, and classes sentence statement as if the internal environment 
Evaluated. 
</p> 

<pre class="emlist"> 
lvar = "toplevel lvar" # determine the scope for local variables 

module M 
end 
M.module_eval (&lt;&lt; 'EOS') # this is when heredoc 
     p lvar # reference 
     p self # M and displayed 
     def ok # M # ok to define 
       puts' ok ' 
     end 
EOS 
</pre> 

<p> 
<code> instance_eval </code> statement of the specific class <code> self </code> object to the environment 
Evaluated. 
</p> 

<pre class="emlist"> 
lvar = "toplevel lvar" # determine the scope for local variables 

obj = Object.new 
obj.instance_eval (&lt;&lt; 'EOS') 
     p lvar # reference 
     p self # # <object:0x40274f5c> and displayed 
     to define def ok # obj.ok 
       puts' ok ' 
     end 
EOS 
</object:0x40274f5c></pre> 

<p> 
The <code> module_eval </code> and <code> instance_eval </code> is also used as iterators 
Worked in this case each block is evaluated by the environment. For example 
</p> 

<pre class="emlist"> 
obj = Object.new 
p obj # # <object:0x40274fac> 
obj.instance_eval ( 
     p self # # <object:0x40274fac> 
) 
</object:0x40274fac></object:0x40274fac></pre> 

<p> 
And so on. 
</p> 

<p> 
But if you use a string and is used to block 
Local variables are different from the behavior around. For example, the method <code> a </code> to block the creation 
Methods <code> b </code>, <code> instance_eval </code>, the block is <code> a </code> of local variables 
About. Methods <code> a </code> method to create a string <code> b </code>, <code> instance_eval </code>, 
During the string of <code> b </code> about local variables. Local variables 
The scope is just a "compilation" determined, so every time compiling 
String and when loading files compiled by block, the result is out 
A different reason. 
</p> 






















<h2> <code> eval </code> </h2> 

<h3> <code> eval () </code> </h3> 

<p> 
Ruby's <code> eval </code> None of the arguments in many cases separated, the format calls 
</p> 

<pre class="emlist"> 
eval (prog_string, some_block) 
</pre> 

<p> 
And limited. The actual interface functions <code> rb_f_eval () </code> is virtually meaningless 
Lose because the other functions under the <code> eval () </code> to look at it now. 
<code> eval () </code> prototype is a function of 
</p> 

<pre class="emlist"> 
static VALUE 
eval (VALUE self, VALUE src, VALUE scope, char * file, int line); 
</pre> 

<p> 
And, <code> scope </code> is the second argument <code> Proc </code>. <code> file </code> and <code> line </code> is <code> eval </code> strings 
Assume that put the name of the file number of lines. Offers a look at the contents. 
</p> 

<p class="caption"> ▼ <code> eval () </code> (condensed version) </p> 
<pre class="longlist"> 
4984 static VALUE 
4985 eval (self, src, scope, file, line) 
4986 VALUE self, src, scope; 
4987 char * file; 
4988 int line; 
(4989 
4990 struct BLOCK * data = NULL; 
4991 volatile VALUE result = Qnil; 
4992 struct SCOPE * volatile old_scope; 
4993 struct BLOCK * volatile old_block; 
4994 struct RVarmap * volatile old_dyna_vars; 
4995 VALUE volatile old_cref; 
4996 int volatile old_vmode; 
4997 volatile VALUE old_wrapper; 
4998 struct FRAME frame; 
4999 NODE * nodesave = ruby_current_node; 
5000 volatile int iter = ruby_frame-&gt; iter; 
5001 int state; 
5002 
5003 if (! NIL_P (scope)) (/ * * I will always be true / 
5009 Data_Get_Struct (scope, struct BLOCK, data); 
5010 / * data from a ship BLOCK * / 
5011 frame = data-&gt; frame; 
5012 frame.tmp = ruby_frame; / * GC awnings * / 
5013 ruby_frame = &amp; (frame); 
5014 old_scope = ruby_scope; 
5015 ruby_scope = data-&gt; scope; 
5016 old_block = ruby_block; 
5017 ruby_block = data-&gt; prev; 
5018 old_dyna_vars = ruby_dyna_vars; 
5019 ruby_dyna_vars = data-&gt; dyna_vars; 
5020 old_vmode = scope_vmode; 
5021 scope_vmode = data-&gt; vmode; 
5022 old_cref = (VALUE) ruby_cref; 
5023 ruby_cref = (NODE *) ruby_frame-&gt; cbase; 
5024 old_wrapper = ruby_wrapper; 
5025 ruby_wrapper = data-&gt; wrapper; 
5032 self = data-&gt; self; 
5033 ruby_frame-&gt; iter = data-&gt; iter; 
5034) 
5045 PUSH_CLASS (); 
5046 ruby_class = ruby_cbase; / * == ruby_frame-&gt; cbase * / 
5047 
5048 ruby_in_eval + +; 
5049 if (TYPE (ruby_class) == T_ICLASS) ( 
5050 ruby_class = RBASIC (ruby_class) -&gt; klass; 
5051) 
5052 PUSH_TAG (PROT_NONE); 
5053 if ((state = EXEC_TAG ()) == 0) ( 
5054 NODE * node; 
5055 
5056 result = ruby_errinfo; 
5057 ruby_errinfo = Qnil; 
5058 node = compile (src, file, line); 
5059 if (ruby_nerrs&gt; 0) ( 
5060 compile_error (0); 
5061) 
5062 if (! NIL_P (result)) ruby_errinfo = result; 
5063 result = eval_node (self, node); 
5064) 
5065 POP_TAG (); 
5066 POP_CLASS (); 
5067 ruby_in_eval -; 
5068 if (! NIL_P (scope)) (/ * * I will always be true / 
5069 int dont_recycle = ruby_scope-&gt; flags &amp; SCOPE_DONT_RECYCLE; 
5070 
5071 ruby_wrapper = old_wrapper; 
5072 ruby_cref = (NODE *) old_cref; 
5073 ruby_frame = frame.tmp; 
5074 ruby_scope = old_scope; 
5075 ruby_block = old_block; 
5076 ruby_dyna_vars = old_dyna_vars; 
5077 data-&gt; vmode = scope_vmode; / * Save changes to the scope of visibility * / 
5078 scope_vmode = old_vmode; 
5079 if (dont_recycle) ( 
                   / *…… SCOPE BLOCK VARS to copy…… * / 
5097) 
5098) 
5104 if (state) ( 
5105 if (state == TAG_RAISE) ( 
                   / *…… Exception object to prepare…… * / 
5121 rb_exc_raise (ruby_errinfo); 
5122) 
5123 JUMP_TAG (state); 
5124) 
5125 
5126 return result; 
5127) 

(eval.c) 
</pre> 


<p> 
Preliminaries no wish to see this function to suddenly "ぐぁっ" It's going to be, 
So far <code> eval.c </code> function has been to defeat our enemy is not anymore. 
This function will do nothing but return to the stack of saving it. I should note 
The following is only three points. 
</p> 

<ul> 
<li> rare <code> FRAME </code> and (push, not a copy) replaced the </li> 
<li> <code> ruby_cref </code> is <code> ruby_frame-&gt; cbase </code> as a substitute for (?) to the </li> 
<li> <code> scope_vmode </code>, but only a simple return <code> data </code> affect </li> 
</ul> 

<p> 
And the main part of the middle <code> compile () </code> and <code> eval_node () </code>. 
<code> eval_node () </code> I have not been forgotten, but the argument <code> node </code> to start evaluating the relationship 
Numbers. <code> ruby_run () </code> But to have been used. 
</p> 

<p> 
<code> compile () </code> are these. 
</p> 

<p class="caption"> ▼ <code> compile () </code> </p> 
<pre class="longlist"> 
4968 static NODE * 
4969 compile (src, file, line) 
4970 VALUE src; 
4971 char * file; 
4972 int line; 
(4973 
4974 NODE * node; 
4975 
4976 ruby_nerrs = 0; 
4977 Check_Type (src, T_STRING); 
4978 node = rb_compile_string (file, src, line); 
4979 
4980 if (ruby_nerrs == 0) return node; 
4981 return 0; 
4982) 

(eval.c) 
</pre> 


<p> 
<code> ruby_nerrs </code> is <code> yyerror () </code> increment in the variable. 
In other words, this variable is non-zero error that happens in Perth. Also 
<code> rb_compile_string () </code> is already in the second part of the deal. Ruby string syntax tree 
The function was compiled. 
</p> 

<p> 
One problem here is because the local variable. Chapter 12, for use in the construction, 
I saw the street, local variables are <code> lvtbl </code> managed by using the. Only 
This is already the <code> SCOPE </code> (and, perhaps <code> VARS </code>) is in existence because, 
And add the override must be in Perth. This is a matter of fact <code> eval () </code> of 
The core of the worst hard place. Again <code> parse.y </code> to return to this search 
Complete up to it. 
</p> 



<h3> <code> top_local </code> </h3> 

<p> 
Variable local management table <code> struct local_vars </code> is used to gain 
<code> local_push () local_pop () </code>. 
Function was, in fact <code> parse.y </code> the table to gain administrative function is no longer a pair. 
<code> top_local_init () </code> and <code> top_local_setup () </code>. It was like this is called 
. 
</p> 

<p class="caption"> ▼ <code> top_local_init () </code> style known as the </p> 
<pre class="longlist"> 
program: (top_local_init ();) 
           compstmt 
             (Top_local_setup ();) 
</pre> 


<p> 
Of course, is actually doing a lot more to it, but now it all does not matter 
Ministry cuts. And the contents are these. 
</p> 

<p class="caption"> ▼ <code> top_local_init () </code> </p> 
<pre class="longlist"> 
5273 static void 
5274 top_local_init () 
(5275 
5276 local_push (1); 
5277 lvtbl-&gt; cnt = ruby_scope-&gt; local_tbl? Ruby_scope-&gt; local_tbl [0]: 0; 
5278 if (lvtbl-&gt; cnt&gt; 0) ( 
5279 lvtbl-&gt; tbl = ALLOC_N (ID, lvtbl-&gt; cnt +3); 
5280 MEMCPY (lvtbl-&gt; tbl, ruby_scope-&gt; local_tbl, ID, lvtbl-&gt; cnt +1); 
5281) 
5282 else ( 
5283 lvtbl-&gt; tbl = 0; 
5284) 
5285 if (ruby_dyna_vars) 
5286 lvtbl-&gt; dlev = 1; 
5287 else 
5288 lvtbl-&gt; dlev = 0; 
5289) 

(parse.y) 
</pre> 


<p> 
In other words <code> ruby_scope </code> and <code> lvtbl </code> in <code> local_tbl </code> to keep a copy. 
After block local variables are seen together better, 
Just concentrate on ordinary local variables. 
Then <code> top_local_setup () </code>. 
</p> 

<p class="caption"> ▼ <code> top_local_setup () </code> </p> 
<pre class="longlist"> 
5291 static void 
5292 top_local_setup () 
(5293 
5294 int len = lvtbl-&gt; cnt; / * Perth after a number of local variables * / 
5295 int i; / * Perth previous local variables * / 
5296 
5297 if (len&gt; 0) ( 
5298 i = ruby_scope-&gt; local_tbl? Ruby_scope-&gt; local_tbl [0]: 0; 
5299 
5300 if (i <len) (="" 5301="" if="" (i="=" 0="" |="" (ruby_scope-=""> flags &amp; SCOPE_MALLOC) == 0) ( 
5302 VALUE * vars = ALLOC_N (VALUE, len +1); 
5303 if (ruby_scope-&gt; local_vars) ( 
5304 * vars + + = ruby_scope-&gt; local_vars [-1]; 
5305 MEMCPY (vars, ruby_scope-&gt; local_vars, VALUE, i); 
5306 rb_mem_clear (vars + i, len-i); 
5307) 
5308 else ( 
5309 * vars + + = 0; 
5310 rb_mem_clear (vars, len); 
5311) 
5312 ruby_scope-&gt; local_vars = vars; 
5313 ruby_scope-&gt; flags | = SCOPE_MALLOC; 
5314) 
5315 else ( 
5316 VALUE * vars = ruby_scope-&gt; local_vars-1; 
5317 REALLOC_N (vars, VALUE, len +1); 
5318 ruby_scope-&gt; local_vars = vars +1; 
5319 rb_mem_clear (ruby_scope-&gt; local_vars + i, len-i); 
5320) 
5321 if (ruby_scope-&gt; local_tbl &amp; &amp; 
                       ruby_scope-&gt; local_vars [-1] == 0) ( 
5322 free (ruby_scope-&gt; local_tbl); 
5323) 
5324 ruby_scope-&gt; local_vars [-1] = 0; / * NODE is I do not want * / 
5325 ruby_scope-&gt; local_tbl = local_tbl (); 
5326) 
5327) 
5328 local_pop (); 
5329) 

(parse.y) 
</len)></pre> 


<p> 
<code> local_vars </code>, or the stack or the heap, so there is somewhat more complicated 
That is, <code> ruby_scope </code>-<code> local_tbl </code> and <code> local_vars </code> to update that. 
Of the guard (<code> SCOPE_MALLOC </code> was standing in the <code> local_vars </code> is <code> malloc () </code> allocation). 
Also here <code> alloca () </code> also means using force in the absence of <code> malloc () </code> allocations 
The only change. 
</p> 



<h3> block local variables </h3> 

<p> 
By the way, block the local variables, but what happens? 
It will first consider the entry point parser <code> yycompile () </code> to 
Must return to. 
</p> 

<p class="caption"> ▼ <code> ruby_dyna_vars </code> saving </p> 
<pre class="longlist"> 
static NODE * 
yycompile (f, line) 
( 
     struct RVarmap * vars = ruby_dyna_vars; 
          : 
     n = yyparse (); 
          : 
     ruby_dyna_vars = vars; 
) 
</pre> 


<p> 
Return as a mere diversion, but we can see, <code> ruby_dyna_vars </code> to clear the Yes 
There is no point. That is made evaluator <code> RVarmap </code> link to a parser 
Directly adds to it. 
</p> 

<p> 
But <code> ruby_dyna_vars </code> parser and the rating should be a different structure. Always links 
問題なsingle-track approach is likely to be in the header (<code> id = 0 </code>-<code> RVarmap </code>) with the difference between the way 
What now? 
</p> 

<p> 
So it is useful <code> top_local_init () </code> was <code> local_push (1) </code> "1" Oh 
Be. <code> local_push () </code> and the argument is true <code> ruby_dyna_vars </code> first with a header 
Guard down. In other words, as shown in Figure 1. The <code> eval </code> string 
Scoping out the reference to block local variables can be confirmed. 

</p><p class="image"> 
<img src="images/ch_anyeval_dynavars.jpg" alt="(dynavars)"> <br> 
Figure 1: <code> eval </code> in <code> ruby_dyna_vars </code> 
</p> 

<p> 
No, I can certainly refer KEDOMO <code> ruby_dyna_vars </code> is parser so they are all freed 
Then you should have no hoops or evaluator made links to free and when you do now…… 
It is aware of the following people are relieved to read it for me. 
</p> 

<p class="caption"> ▼ <code> yycompile () </code> - <code> ruby_dyna_vars </code> release </p> 
<pre class="longlist"> 
2386 vp = ruby_dyna_vars; 
2387 ruby_dyna_vars = vars; 
2388 lex_strterm = 0; 
2389 while (vp &amp; &amp; vp! = Vars) ( 
2390 struct RVarmap * tmp = vp; 
2391 vp = vp-&gt; next; 
2392 rb_gc_force_recycle ((VALUE) tmp); 
2393) 

(parse.y) 
</pre> 


<p> 
Evaluator made link (<code> vars </code>) to come right loop 
To stop it. 
</p> 



























<h2> <code> instance_eval </code> </h2> 

<h3> overall picture </h3> 

<p> 
<code> Module # module_eval </code> entities are <code> rb_mod_module_eval () </code>, 
<code> Object # instance_eval </code> entities are <code> rb_obj_instance_eval () </code>. 
</p> 

<p class="caption"> ▼ <code> rb_mod_module_eval () rb_obj_instance_eval () </code> </p> 
<pre class="longlist"> 
5316 VALUE 
5317 rb_mod_module_eval (argc, argv, mod) 
5318 int argc; 
5319 VALUE * argv; 
5320 VALUE mod; 
(5321 
5322 return specific_eval (argc, argv, mod, mod); 
5323) 

5298 VALUE 
5299 rb_obj_instance_eval (argc, argv, self) 
5300 int argc; 
5301 VALUE * argv; 
5302 VALUE self; 
(5303 
5304 VALUE klass; 
5305 
5306 if (rb_special_const_p (self)) ( 
5307 klass = Qnil; 
5308) 
5309 else ( 
5310 klass = rb_singleton_class (self); 
5311) 
5312 
5313 return specific_eval (argc, argv, klass, self); 
5314) 

(eval.c) 
</pre> 


<p> 
These two methods are "<code> self </code> and <code> class </code> to replace the method," as in common 
Since it is out <code> specific_eval () </code> has been organized. This target also includes 
Because it illustrated to try (see Figure 2). 
Bracketed by calling the function pointer. 
</p> 

<p class="image"> 
<img src="images/ch_anyeval_speceval.jpg" alt="(speceval)"> <br> 
Figure 2: Call graph 
</p> 

<p> 
<code> instance_eval </code> to have <code> module_eval </code> to have both a block and a string of them 
Because a unique process to make <code> eval </code> and <code> yield </code> split up. But the 
Most part it is also common, it is <code> exec_under () </code> out as a tie 
Have not. 
</p> 

<p> 
But read from the standpoint of a 2 \ times 2 = 4 at the same time deal with street 
Particularly, and it does, it is inadvisable. So here is 
</p> 

<ol> 
<li> <code> instance_eval </code> in, </li> 
<li> when you take a string argument </li> 
</ol> 

<p> 
Only consider <code> rb_obj_instance_eval () </code> All these functions inline deployment, 
Constant folding to read it to him. 
</p> 



<h3> annexed after </h3> 

<p> 
MATOMETARA all this happened. 
Compared with the previous annexation has been pretty clear. 
</p> 

<p class="caption"> ▼ <code> specific_eval () </code> - <code> instance_eval </code>, <code> eval </code>, string </p> 
<pre class="longlist"> 
static VALUE 
instance_eval_string (self, src, file, line) 
     VALUE self, src; 
     const char * file; 
     int line; 
( 
     VALUE sclass; 
     VALUE result; 
     int state; 
     int mode; 

     sclass = rb_singleton_class (self); 

     PUSH_CLASS (); 
     ruby_class = sclass; 
     PUSH_FRAME (); 
     ruby_frame-&gt; self = ruby_frame-&gt; prev-&gt; self; 
     ruby_frame-&gt; last_func = ruby_frame-&gt; prev-&gt; last_func; 
     ruby_frame-&gt; last_class = ruby_frame-&gt; prev-&gt; last_class; 
     ruby_frame-&gt; argc = ruby_frame-&gt; prev-&gt; argc; 
     ruby_frame-&gt; argv = ruby_frame-&gt; prev-&gt; argv; 
     if (ruby_frame-&gt; cbase! = sclass) ( 
         ruby_frame-&gt; cbase = rb_node_newnode (NODE_CREF, sclass, 0, 
                                             ruby_frame-&gt; cbase); 
     ) 
     PUSH_CREF (sclass); 

     mode = scope_vmode; 
     SCOPE_SET (SCOPE_PUBLIC); 
     PUSH_TAG (PROT_NONE); 
     if ((state = EXEC_TAG ()) == 0) ( 
         result = eval (self, src, Qnil, file, line); 
     ) 
     POP_TAG (); 
     SCOPE_SET (mode); 

     POP_CREF (); 
     POP_FRAME (); 
     POP_CLASS (); 
     if (state) JUMP_TAG (state); 

     return result; 
) 
</pre> 


<p> 
Object-specific classes <code> CLASS </code> and <code> CREF </code> and <code> ruby_frame-&gt; cbase </code> to 
Push. Story goes. The main processing <code> eval () </code> the first attempt. Usual 
Different <code> FRAME </code> a copy of the initial structure of them is not uncommon, 
That's not much difference. 
</p> 



<h3> annexation ago </h3> 

<p> 
I have become easy to read even though they may say, perhaps before the annexation easyだっ 
The following might be. Compared to the previous annexation and easily Where is that? 
To try to verify. 
</p> 

<p> 
First <code> specific_eval () </code>. This function is part of the interface and Ruby 
To a common code for one, most of the arguments of Perth. 
It all, he cut back. 
</p> 

<p class="caption"> ▼ <code> specific_eval () </code> (condensed version) </p> 
<pre class="longlist"> 
5258 static VALUE 
5259 specific_eval (argc, argv, klass, self) 
5260 int argc; 
5261 VALUE * argv; 
5262 VALUE klass, self; 
(5263 
5264 if (rb_block_given_p ()) ( 

5268 return yield_under (klass, self); 
5269) 
5270 else ( 

5294 return eval_under (klass, self, argv [0], file, line); 
5295) 
5296) 

(eval.c) 
</pre> 


<p> 
This street block and whether there are two completely separate, 
Each code is the root of the influence they can not. So 
Read one at a time when you should read. The first edition annexed to this point has been improved. 
</p> 

<p> 
Also <code> yield_under () </code> When you read <code> file </code> and <code> line </code> relationship is not 
<code> yield </code> route to the annexation of the party's argument about Perth 
I can not think about going to be clear. 
</p> 

<p> 
Then <code> eval_under () </code> and <code> eval_under_i () </code> to look at. 
</p> 

<p class="caption"> ▼ <code> eval_under () </code> </p> 
<pre class="longlist"> 
5222 static VALUE 
5223 eval_under (under, self, src, file, line) 
5224 VALUE under, self, src; 
5225 const char * file; 
5226 int line; 
(5230 
5228 VALUE args [4]; 
5229 
5230 if (ruby_safe_level&gt; = 4) ( 
5231 StringValue (src); 
5232) 
5233 else ( 
5234 SafeStringValue (src); 
5235) 
5236 args [0] = self; 
5237 args [1] = src; 
5238 args [2] = (VALUE) file; 
5239 args [3] = (VALUE) line; 
5240 return exec_under (eval_under_i, under, under, args); 
5241) 

5214 static VALUE 
5215 eval_under_i (args) 
5216 VALUE * args; 
(5217 
5218 return eval (args [0], args [1], Qnil, (char *) args [2], (int) args [3]); 
5219) 

(eval.c) 
</pre> 


<p> 
This function is one of the arguments for an array <code> args </code> via the pass. 
This <code> args </code> is <code> eval_under () </code> and <code> eval_under_i () </code> to pass a temporary 
I wonder containers, 
Is it possible to predict, but I really do not know. Maybe 
<code> exec_under () </code> in <code> args </code> and the process might be.
</p> 

<p> 
As a way of a common code that it is very correct way, but 
Read from the side of the pass to get into this kind of indirect and hard-to-understand. 
In particular <code> file </code> and <code> line </code> sesame seeds morph into a compiler for the cast is wasted in the 
Really, so what type is hard to imagine. This area is annexed to its all disappeared 
Because they do not have to choose. 
</p> 

<p> 
But the annexation or expand and it is always easy to understand is that it is a 
. For example <code> exec_under () </code> to call when the second and third arguments are arguments <code> under </code> passing 
However, <code> exec_under () </code> side of the parameters of both the variable <code> under </code> to expand the 
I want to? Say, 
<code> exec_under () </code> in the second and third argument is actually a push to be <code> CLASS </code> and <code> CREF </code> shows 
The. <code> CLASS </code> and <code> CREF </code> "otherness", to use another variable, but it 
I might. This version of the annexation is only 
</p> 

<pre class="emlist"> 
VALUE sclass = .....; 
VALUE cbase = sclass; 
</pre> 

<p> 
And I thought, but it suddenly left so many variables and there is something wrong with 
I thought, <code> sclass </code>'ve been deployed. That is the top sentence flow only. 
</p> 

<p> 
As many times arguments to expand and expand and function has been, but every time 
Doggedly explain the reason for deployment. That is 
</p> 

<ul> 
<li> depth pattern is limited in the number of patterns when </li> 
<li> a subtle change in behavior when </li> 
</ul> 

<p> 
. 
"I get a lot of things can easily be deployed." 
I can not tell, never. 
</p> 

<p> 
It is always preferred for their ease of understanding, not a step 
It is not to protect. Expand it, it is easy to understand and deployment. 
Do not expand, or vice versa summary of the proceedings it is easy to understand if you feel 
I agree. <code> ruby </code> If the source is not good writing because it was just a deployment 
, Who wrote a bad source to function if it is clear it away tie 
Often it. 



</p><hr>
<p>
The original work is Copyright © 2002 - 2004 Minero AOKI.<br>
Translations,&nbsp; additions,&nbsp; and graphics by C.E. Thornton<br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="images/somerights20.jpg"></a><br>This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike2.5 License</a>.
</p>

