
<h1>Chapter 15: Method</h1>

<p> 
In this chapter we will talk about methods and start exploring. 
</p> 


<h2> search method </h2> 

<h3> term </h3> 

<p> 
This chapter is a method call and talk to both the method of defining one's relationships, 
Such a variety of "argument" will come out. So, so ambiguously 
Term to decide exactly where it can get to it. 
</p> 

<pre class="emlist"> 
m (a) # a "typical argument" 
m (* list) # list is "an array of arguments" 
m (&amp; block) # block the "block argument" 

def m (a) # a "normal parameters" 
def m (a = nil) # a "parameter options", nil, "the default value" 
def m (* rest) # rest is "rest parameters" 
def m (&amp; block) # block the "block parameters" 
</pre> 

<p> 
YOUSURUNI to pass all the "arguments", it will receive all the "parameters" 
Each type of adjectives one, they say. 
</p> 

<p> 
However, I just mentioned. "Block argument" and "block parameters" 
Next, in the case of the block will be dealing with. 
</p> 



<h3> survey </h3> 

<p class="caption"> ▼ source program </p> 
<pre class="longlist"> 
obj.method (7,8) 
</pre> 


<p class="caption"> ▼ corresponding syntax tree </p> 
<pre class="longlist"> 
NODE_CALL 
nd_mid = 9049 (method) 
nd_recv: 
     NODE_VCALL 
     nd_mid = 9617 (obj) 
nd_args: 
     NODE_ARRAY [ 
     0: 
         NODE_LIT 
         nd_lit = 7: Fixnum 
     1: 
         NODE_LIT 
         nd_lit = 8: Fixnum 
     ] 
</pre> 


<p> 
Node is a method call <code> NODE_CALL </code>. 
<code> nd_args </code> in <code> NODE_ARRAY </code> is a list of arguments that are stored. 
</p> 

<p> 
In addition to this method is called as a node <code> NODE_FCALL </code> and 
<code> NODE_VCALL </code> Correction 
UNO. <code> NODE_FCALL </code> is "<code> method (args) </code>" format, <code> NODE_VCALL </code> is local 
The same variables "<code> method </code>" in the form of response to the call. It is not really 
<code> FCALL </code> and <code> VCALL </code> is one that can be put together, <code> VCALL </code> when the argument to prepare 
No need for a code that the memory and only in order to save time 
That distinction. 
</p> 

<p> 
, <code> rb_eval () </code>, <code> NODE_CALL </code> handlers to look at. 
</p> 

<p class="caption"> ▼ <code> rb_eval () </code> - <code> NODE_CALL </code> </p> 
<pre class="longlist"> 
2745 case NODE_CALL: 
(2746 
2747 VALUE recv; 
2748 int argc; VALUE * argv; / * used in SETUP_ARGS * / 
2749 TMP_PROTECT; 
2750 
2751 BEGIN_CALLARGS; 
2752 recv = rb_eval (self, node-&gt; nd_recv); 
2753 SETUP_ARGS (node-&gt; nd_args); 
2754 END_CALLARGS; 
2755 
2756 SET_CURRENT_SOURCE (); 
2757 result = rb_call (CLASS_OF (recv), recv, node-&gt; nd_mid, argc, argv, 0); 
2758) 
2759 break; 

(eval.c) 
</pre> 


<p> 
There are three macro issues, <code> BEGIN_CALLARGS SETUP_ARGS () END_CALLARGS </code>. 
<code> rb_eval () </code> receiver evaluation <code> rb_call () </code>起動らしいhad a method, the three 
Macro assessment of the argument that it's tough, and you can imagine the sort of 
Is actually what you are doing? <code> BEGIN_CALLARGS </code> and <code> END_CALLARGS </code> is 
Iterator to talk to them and not hard to understand, the next chapter in the block, 
Once explained. This is <code> SETUP_ARGS () </code> with the investigation only. 
</p> 



<h3> <code> SETUP_ARGS () </code> </h3> 

<p> 
<code> SETUP_ARGS () </code> is a method to assess the macro part of the argument. This macro 
, The original program as the comments, <code> argc </code> and <code> argv </code> a variable 
So it must be defined in advance. Also 
<code> TMP_ALLOC () </code> since they use <code> TMP_PROTECT </code> should have been using. 
So the following is formulaic. 
</p> 

<pre class="emlist"> 
int argc; VALUE * argv; / * used in SETUP_ARGS * / 
TMP_PROTECT; 

SETUP_ARGS (args_node); 
</pre> 

<p> 
<code> args_node </code> is the method of argument (to represent node), which evaluated 
The array of different values, <code> argv </code> stored. Let's not look at. 
</p> 

<p class="caption"> ▼ <code> SETUP_ARGS () </code> </p> 
<pre class="longlist"> 
1780 # define SETUP_ARGS (anode) do (\ 
1781 NODE * n = anode; \ 
1782 if (! N) (\ no argument 
1783 argc = 0; \ 
1784 argv = 0; \ 
1785) \ 
1786 else if (nd_type (n) == NODE_ARRAY) (\ usually only argument 
1787 argc = n-&gt; nd_alen; \ 
1788 if (argc&gt; 0) (\ arguments in 
1789 int i; \ 
1790 n = anode; \ 
1791 argv = TMP_ALLOC (argc); \ 
1792 for (i = 0; i <argc; i="" +="" +)="" (\="" 1793="" argv="" [i]="rb_eval" (self,="" n-=""> nd_head); \ 
1794 n = n-&gt; nd_next; \ 
1795) \ 
1796) \ 
1797 else (\ no argument 
1798 argc = 0; \ 
1799 argv = 0; \ 
1800) \ 
1801) \ 
1802 else (\ array of arguments and 
1803 VALUE args = rb_eval (self, n); \ argument for the block 
1804 if (TYPE (args)! = T_ARRAY) \ 
1805 args = rb_ary_to_ary (args); \ 
1806 argc = RARRAY (args) -&gt; len; \ 
1807 argv = ALLOCA_N (VALUE, argc); \ 
1808 MEMCPY (argv, RARRAY (args) -&gt; ptr, VALUE, argc); \ 
1809) \ 
1810) while (0) 

(eval.c) 
</argc;></pre> 


<p> 
Rather lengthy, and three branches to the sea because TAISHITE actually does harm. 
Each branch is the meaning of the comments earlier in the street. 
</p> 

<p> 
None of the arguments does not matter as the rest of the two branches have a similar thing 
Do you have. I can roughly say that the three phases, 
</p> 

<ol> 
<li> argument into space </li> 
<li> formula to evaluate the argument </li> 
<li> value to the variable region copy </li> 
</ol> 

<p> 
. I try writing the code. 
(Incidentally format and a little earlier). 
</p> 

<pre class="emlist"> 
/***** Else if clause, argc! = 0 *****/ 
int i; 
n = anode; 
argv = TMP_ALLOC (argc); / * 1 * / 
for (i = 0; i <argc; i="" +="" +)="" (="" argv="" [i]="rb_eval" (self,="" n-=""> nd_head); / * 2,3 * / 
     n = n-&gt; nd_next; 
) 

/***** Else clause *****/ 
VALUE args = rb_eval (self, n); / * 2 * / 
if (TYPE (args)! = T_ARRAY) 
     args = rb_ary_to_ary (args); 
argc = RARRAY (args) -&gt; len; 
argv = ALLOCA_N (VALUE, argc); / * 1 * / 
MEMCPY (argv, RARRAY (args) -&gt; ptr, VALUE, argc); / * 3 * / 
</argc;></pre> 

<p> 
<code> else if </code> side, it is <code> TMP_ALLOC () </code>, but with <code> else </code> side, 
<code> ALLOCA_N () </code>, that is normal <code> alloca () </code> Why are you using? 
<code> C_ALLOCA </code> environment is <code> alloca () </code> is <code> malloc () </code> equal to it, is dangerous and 
No? 
</p> 

<p> 
This is "<code> else </code> side of the argument value is <code> args </code> it is," It is 
Points. If the figure as shown in Figure 1. 
</p> 

<p class="image"> 
<img src="images/ch_method_anchor.jpg" alt="(anchor)"> <br> 
Figure 1: Even if you do not heap 
</p> 

<p> 
It is also one of <code> VALUE </code> on the stack if there through the chain marked. 
Such <code> VALUE </code> other <code> VALUE </code> stack to stop the Spanish beard anchor (anchor) like 
Role, namely "anchor <code> VALUE </code>" said. 
<code> else </code> side, it is <code> args </code> to anchor <code> VALUE </code>. 
</p> 

<p> 
Incidentally anchor <code> VALUE </code> is not a term coined made. 
</p> 



<h3> <code> rb_call () </code> </h3> 

<p> 
<code> SETUP_ARGS () </code> If anything is wrong way. From here you can go back to the main topic. Method 
To start the function <code> rb_call () </code>. If you are a real exception to the above見付からなかった 
You look at the code, but omit all by example. 
</p> 

<p class="caption"> ▼ <code> rb_call () </code> (condensed version) </p> 
<pre class="longlist"> 
static VALUE 
rb_call (klass, recv, mid, argc, argv, scope) 
     VALUE klass, recv; 
     ID mid; 
     int argc; 
     const VALUE * argv; 
     int scope; 
( 
     NODE * body; 
     int noex; 
     ID id = mid; 
     struct cache_entry * ent; 

     / * * Method cache / 
     ent = cache + EXPR1 (klass, mid); 
     if (ent-&gt; mid == mid &amp; &amp; ent-&gt; klass == klass) ( 
         / * * Cache hit / 
         klass = ent-&gt; origin; 
         id = ent-&gt; mid0; 
         noex = ent-&gt; noex; 
         body = ent-&gt; method; 
     ) 
     else ( 
         / * Miss cache. Execute search * / 
         body = rb_get_method_body (&amp; klass, &amp; id, &amp; noex); 
     ) 

     / *…… Check the visibility…… * / 

     return rb_call0 (klass, recv, mid, id, 
                     argc, argv, body, noex &amp; NOEX_UNDEF); 
) 
</pre> 


<p> 
The basic method is exploring how the object, in Chapter 2. Super 
TADORI class while <code> m_tbl </code> You can search. Is to do it 
<code> search_method () </code>. 
</p> 

<p> 
That's right, the principle is, however, but to actually run the stage and method calls 
How many times each time searching for the hash to pull his speed is too late. To break 
Good for <code> ruby </code>, once called the method is similar to the cache 
. The method is called just once, and we can often invoked, that 
Experience on the facts as known, and the cache hit rate is high. 
</p> 

<p> 
The cache, which is索い<code> rb_call () </code> the first half. This 
</p> 

<pre class="emlist"> 
ent = cache + EXPR1 (klass, mid); 
</pre> 

<p> 
Only one line has been cached. The mechanism is more to look after. 
</p> 

<p> 
When the cache is out of the next <code> rb_get_method_body () </code> class tree in an honest way 
Search the results of the cache TSUIDENI keep it that. 
Search the entire flow chart should look like Figure 2. 
</p> 

<p class="image"> 
<img src="images/ch_method_msearch.jpg" alt="(msearch)"> <br> 
Figure 2: The search method 
</p> 



<h3> method cache </h3> 

<p> 
Then method of cash, let's take a closer look at the structure. 
</p> 

<p class="caption"> ▼ method cache </p> 
<pre class="longlist"> 
  180 # define CACHE_SIZE 0x800 
  181 # define CACHE_MASK 0x7ff 
  182 # define EXPR1 (c, m) ((((c)&gt;&gt; 3) ^ (m)) &amp; CACHE_MASK) 
  183 
  184 struct cache_entry (/ * method hash table. * / 
  185 ID mid; / * method's id * / 
  186 ID mid0; / * method's original id * / 
  187 VALUE klass; / * receiver's class * / 
  188 VALUE origin; / * where method defined * / 
  189 NODE * method; 
  190 int noex; 
  191); 
  192 
  193 static struct cache_entry cache [CACHE_SIZE]; 

(eval.c) 
</pre> 


<p> 
In a nutshell mechanisms to hash tables. And the principle of the hash table 
YOUSURUNI table an array of search indexing convert it. Resona 
The time required to be at least three. An array of data, key, and hash 
Function. 
</p> 

<p> 
This is the first array is <code> struct cache_entry </code> array. Kula and methods 
Su and uniquely determined by the method name only from the two key calculation of the hash 
Be. After the cache from an array of key index (<code> 0x000 </code> in <code> 0x7ff </code>) live 
Sung to make a hash function. That's <code> EXPR1 () </code>. Arguments <code> c </code> of the class 
Projects in, <code> m </code> is the method name (<code> ID </code>) (see Figure 3). 
</p> 

<p class="image"> 
<img src="images/ch_method_mhash.jpg" alt="(mhash)"> <br> 
Figure 3: Cash method 
</p> 

<p> 
However <code> EXPR1 () </code> hash function is completely different because of what method is really a coincidence 
To generate the same index that can result possible. However, this is just an interesting 
SHU collision because it is not the problem. But work is only a little slower. 
</p> 

<h4> method cache effect </h4> 

<p> 
By the way, the method is actually how much cash is the effect? 
"…… It is known that" they are also unconvinced. Measuring your own. 
</p> 

<table> 
<tbody><tr> <td> types </td><td> </td><td> program </td><td> </td><td> hit rate </td><td> </td></tr> 
<tr> <td> LALR (1) generated parser </td><td> </td><td> <code> racc ruby.y </code> </td><td> </td><td> 99.9% </td><td> </td></tr> 
<tr> <td> generated MERUSUREDDO </td><td> </td><td> certain mailers </td><td> </td><td> 99.1% </td><td> </td></tr> 
<tr> <td> document generation </td><td> </td><td> <code> rd2html rubyrefm.rd </code> </td><td> </td><td> 97.8% </td><td> </td></tr> 
</tbody></table> 

<p> 
What the experiment in all three cases hit a record rate of 95% or more. 
This is Great. Apparently, "…… it is known that" the effect of 
Outstanding. 
</p> 



























<h2> start </h2> 

<h3> <code> rb_call0 () </code> </h3> 

<p> 
Now the method for many reasons, but where to start with Tasoritsuku this <code> rb_call0 () </code> is 
And big. It is more than 200 lines on the page will be five or six pages? 
Anyway, the viewer, at once lay out the paper and it would be disastrous split in detail 
While we go to it. From the first snap. 
</p> 

<p class="caption"> ▼ <code> rb_call0 () </code> (primary) </p> 
<pre class="longlist"> 
4482 static VALUE 
4483 rb_call0 (klass, recv, id, oid, argc, argv, body, nosuper) 
4484 VALUE klass, recv; 
4485 ID id; 
4486 ID oid; 
4487 int argc; / * OK * / 
4488 VALUE * argv; / * OK * / 
4489 NODE * body; / * OK * / 
4490 int nosuper; 
(4491 
4492 NODE * b2; / * OK * / 
4493 volatile VALUE result = Qnil; 
4494 int itr; 
4495 static int tick; 
4496 TMP_PROTECT; 
4497 
4498 switch (ruby_iter-&gt; iter) ( 
4499 case ITER_PRE: 
4500 itr = ITER_CUR; 
4501 break; 
4502 case ITER_CUR: 
4503 default: 
4504 itr = ITER_NOT; 
4505 break; 
4506) 
4507 
4508 if ((+ + tick &amp; 0xff) == 0) ( 
4509 CHECK_INTS; / * better than nothing * / 
4510 stack_check (); 
4511) 
4512 PUSH_ITER (itr); 
4513 PUSH_FRAME (); 
4514 
4515 ruby_frame-&gt; last_func = id; 
4516 ruby_frame-&gt; orig_func = oid; 
4517 ruby_frame-&gt; last_class = nosuper? 0: klass; 
4518 ruby_frame-&gt; self = recv; 
4519 ruby_frame-&gt; argc = argc; 
4520 ruby_frame-&gt; argv = argv; 
4521 
4522 switch (nd_type (body)) ( 
               / *…… This treatment…… * / 
4698 
4699 default: 
4700 rb_bug ( "unknown node type% d", nd_type (body)); 
4701 break; 
4702) 
4703 POP_FRAME (); 
4704 POP_ITER (); 
4705 return result; 
4706) 

(eval.c) 
</pre> 


<p> 
First <code> ITER </code> putting in iterator whether this method is ultimately determined. Resona 
After <code> PUSH_FRAME () </code>, whose value is immediately used to <code> PUSH_ITER () </code> in front of the 
But you have to. <code> PUSH_FRAME () </code> on the heels of. 
</p> 

<p> 
And at "…… this treatment……" and I talk about here is 
Following each node is divided into different startup process. 
</p> 

<table> 
<tbody><tr> <td> <code> NODE_CFUNC </code> </td><td> </td><td> C defined by the method </td><td> </td></tr> 
<tr> <td> <code> NODE_IVAR </code> </td><td> </td><td> <code> attr_reader </code> </td><td> </td></tr> 
<tr> <td> <code> NODE_ATTRSET </code> </td><td> </td><td> <code> attr_writer </code> </td><td> </td></tr> 
<tr> <td> <code> NODE_SUPER </code> </td><td> </td><td> <code> super </code> </td><td> </td></tr> 
<tr> <td> <code> NODE_ZSUPER </code> </td><td> </td><td> no arguments <code> super </code> </td><td> </td></tr> 
<tr> <td> <code> NODE_DMETHOD </code> </td><td> </td><td> <code> UnboundMethod </code> start </td><td> </td></tr> 
<tr> <td> <code> NODE_BMETHOD </code> </td><td> </td><td> <code> Method </code> start </td><td> </td></tr> 
<tr> <td> <code> NODE_SCOPE </code> </td><td> </td><td> Ruby method defined by </td><td> </td></tr> 
</tbody></table> 

<p> 
This document will not have to explain, but none is so important with scant disregard them 
. It is important <code> NODE_CFUNC </code> and <code> NODE_SCOPE </code>, and <code> NODE_ZSUPER </code> only. 
</p> 



<h3> <code> PUSH_FRAME () </code> </h3> 

<p class="caption"> ▼ <code> PUSH_FRAME () POP_FRAME () </code> </p> 
<pre class="longlist"> 
  536 # define PUSH_FRAME () do (\ 
  537 struct FRAME _frame; \ 
  538 _frame.prev = ruby_frame; \ 
  539 _frame.tmp = 0; \ 
  540 _frame.node = ruby_current_node; \ 
  541 _frame.iter = ruby_iter-&gt; iter; \ 
  542 _frame.cbase = ruby_frame-&gt; cbase; \ 
  543 _frame.argc = 0; \ 
  544 _frame.argv = 0; \ 
  545 _frame.flags = FRAME_ALLOCA; \ 
  546 ruby_frame = &amp; _frame 

  548 # define POP_FRAME () \ 
  549 ruby_current_node = _frame.node; \ 
  550 ruby_frame = _frame.prev; \ 
  551) while (0) 

(eval.c) 
</pre> 


<p> 
First <code> FRAME </code> solid place to ensure that the stack you want to see. This is 
<code> module_setup () </code> same. The rest is basically normal and only initialization. 
</p> 

<p> 
If you add one thing, <code> FRAME_ALLOCA </code> Flags <code> FRAME </code> of 
It shows how the assignment, much? <code> FRAME_ALLOCA </code> and 
Of course, "on a stack" shows. 
</p> 



<h3> <code> rb_call0 () </code> - <code> NODE_CFUNC </code> </h3> 

<p> 
Here's a look at the real number is a lot of writing, but most of 
<code> trace_func </code> substantive relationship because it is the end of the line. 
</p> 

<p class="caption"> ▼ <code> rb_call0 () </code> - <code> NODE_CFUNC </code> (condensed version) </p> 
<pre class="longlist"> 
case NODE_CFUNC: 
   result = call_cfunc (body-&gt; nd_cfnc, recv, len, argc, argv); 
   break; 
</pre> 


<p> 
, <code> call_cfunc () </code> is said…… 
</p> 

<p class="caption"> ▼ <code> call_cfunc () </code> (condensed version) </p> 
<pre class="longlist"> 
4394 static VALUE 
4395 call_cfunc (func, recv, len, argc, argv) 
4396 VALUE (* func) (); 
4397 VALUE recv; 
4398 int len, argc; 
4399 VALUE * argv; 
(4400 
4401 if (len&gt; = 0 &amp; &amp; argc! = Len) ( 
4402 rb_raise (rb_eArgError, "wrong number of arguments (% d for% d)", 
4403 argc, len); 
4404) 
4405 
4406 switch (len) ( 
4407 case -2: 
4408 return (* func) (recv, rb_ary_new4 (argc, argv)); 
4409 break; 
4410 case -1: 
4411 return (* func) (argc, argv, recv); 
4412 break; 
4413 case 0: 
4414 return (* func) (recv); 
4415 break; 
4416 case 1: 
4417 return (* func) (recv, argv [0]); 
4418 break; 
4419 case 2: 
4420 return (* func) (recv, argv [0], argv [1]); 
4421 break; 
                 : 
                 : 
4475 default: 
4476 rb_raise (rb_eArgError, "too many arguments (% d)", len); 
4477 break; 
4478) 
4479 return Qnil; / * not reached * / 
4480) 

(eval.c) 
</pre> 


<p> 
Thus, the argument based on the number of branches. 
By the way, the argument that the maximum number is 15. 
</p> 

<p> 
One of them is aware, <code> NODE_CFUNC </code> when the <code> SCOPE </code> and <code> VARS </code> not on board 
. The method is <code> C </code> If it is defined in Ruby, so do not use local variables 
There is good reason to put it. But at the same time <code> C </code> from the "current" local variables 
To access the previous one and <code> FRAME </code> local variables that will see it 
Mean that. And it actually doing both. For example 
<code> rb_svar </code> (<code> eval.c </code>). 
</p> 



<h3> <code> rb_call0 () </code> - <code> NODE_SCOPE </code> </h3> 

<p> 
<code> NODE_SCOPE </code> Ruby That is defined by the start of the method. 
The underlying part of Ruby. 
</p> 

<p class="caption"> ▼ <code> rb_call0 () </code> - <code> NODE_SCOPE </code> (primary) </p> 
<pre class="longlist"> 
4568 case NODE_SCOPE: 
(4558 
4570 int state; 
4571 VALUE * local_vars; / * OK * / 
4572 NODE * saved_cref = 0; 
4573 
4574 PUSH_SCOPE (); 
4575 
             / * (A) CREF transfer * / 
4576 if (body-&gt; nd_rval) ( 
4577 saved_cref = ruby_cref; 
4578 ruby_cref = (NODE *) body-&gt; nd_rval; 
4579 ruby_frame-&gt; cbase = body-&gt; nd_rval; 
4580) 
             / * (B) ruby_scope-&gt; local_vars initialization * / 
4581 if (body-&gt; nd_tbl) ( 
4582 local_vars = TMP_ALLOC (body-&gt; nd_tbl [0] +1); 
4583 * local_vars + + = (VALUE) body; 
4584 rb_mem_clear (local_vars, body-&gt; nd_tbl [0]); 
4585 ruby_scope-&gt; local_tbl = body-&gt; nd_tbl; 
4586 ruby_scope-&gt; local_vars = local_vars; 
4587) 
4588 else ( 
4589 local_vars = ruby_scope-&gt; local_vars = 0; 
4590 ruby_scope-&gt; local_tbl = 0; 
4591) 
4592 b2 = body = body-&gt; nd_next; 
4593 
4594 PUSH_VARS (); 
4595 PUSH_TAG (PROT_FUNC); 
4596 
4597 if ((state = EXEC_TAG ()) == 0) ( 
4598 NODE * node = 0; 
4599 int i; 

                 / *…… (C) local variable arguments…… * / 

4666 if (trace_func) ( 
4667 call_trace_func ( "call", b2, recv, id, klass); 
4668) 
4669 ruby_last_node = b2; 
                 / * (D) method bodies * / 
4670 result = rb_eval (recv, body); 
4671) 
4672 else if (state == TAG_RETURN) (/ * return to return * / 
4673 result = prot_tag-&gt; retval; 
4674 state = 0; 
4675) 
4676 POP_TAG (); 
4677 POP_VARS (); 
4678 POP_SCOPE (); 
4679 ruby_cref = saved_cref; 
4680 if (trace_func) ( 
4681 call_trace_func ( "return", ruby_last_node, recv, id, klass); 
4682) 
4683 switch (state) ( 
4684 case 0: 
4685 break; 
4686 
4687 case TAG_RETRY: 
4688 if (rb_block_given_p ()) ( 
4689 JUMP_TAG (state); 
4690) 
4691 / * fall through * / 
4692 default: 
4693 jump_tag_but_local_jump (state); 
4694 break; 
4695) 
4696) 
4697 break; 

(eval.c) 
</pre> 


<p> 
(A) Back at the constant talk <code> CREF </code> transmission. 
That is the method of entry <code> FRAME </code> in <code> cbase </code> transplant. 
</p> 

<p> 
(B) is here <code> module_setup () </code>, did exactly the same. 
<code> SCOPE </code>-<code> local_vars </code> array assigned to it. In <code> PUSH_SCOPE () </code>, 
<code> PUSH_VARS () </code> generated in the scope of local variables is complete. This is after 
Exactly the same methods and internal environment <code> rb_eval () </code> can be. 
</p> 

<p> 
(C) received a method's arguments set the parameters variable. 
YOUSURUNI local variables and parameters of the same variable. Argument 
The number of <code> NODE_ARGS </code> specified in the same honest way I set SHITEYARE. 
Further explanation of this immediately. And, 
</p> 

<p> 
(D) method to run the body. Naturally receiver (<code> recv </code>) to <code> self </code> said. 
In other words <code> rb_eval () </code> the first argument. This method is fully launched. 
</p> 



<h3> arguments set </h3> 

<p> 
SUTTOBA part of the argument, set a detailed look at the 
The method of construction before the first trees to see me again. 
</p> 

<pre class="screen"> 
% Ruby-rnodedump-e 'def m (a) nil end' 
NODE_SCOPE 
nd_rval = (null) 
nd_tbl = 3 [_ ~ a] 
nd_next: 
     NODE_BLOCK 
     nd_head: 
         NODE_ARGS 
         nd_cnt = 1 
         nd_rest = -1 
         nd_opt = (null) 
     nd_next: 
         NODE_BLOCK 
         nd_head: 
             NODE_NEWLINE 
             nd_file = "-e" 
             nd_nth = 1 
             nd_next: 
                 NODE_NIL 
         nd_next = (null) 
</pre> 

<p> 
<code> NODE_ARGS </code> method is to specify the parameters of nodes. 
まくっtried to dump some of its members are as follows: 
Being used.
</p> 

<table> 
<tbody><tr> <td> <code> nd_cnt </code> </td><td> </td><td> usual number of parameters. </td><td> </td></tr> 
<tr> <td> <code> nd_rest </code> </td><td> </td><td> <code> rest </code> variable parameters <code> ID </code>. <code> rest </code> parameters unless <code> -1 </code>. </td><td> </td></tr> 
<tr> <td> <code> nd_opt </code> </td><td> </td><td> default option syntax tree to represent the value in it. <code> NODE_BLOCK </code> list. </td><td> </td></tr> 
</tbody></table> 

<p> 
With so much information you need to respond to each parameter variable ID is unique to the local variables 
Determined. First one is always 0 <code>$_</code> and <code>$~</code>. The next two from the normal parameters 
The number of line up. The parameters are lining up to the next option. PERTH options 
The number of parameter <code> NODE_BLOCK </code> can see in length. The parameters of the rest came after 
Be. 
</p> 

<p> 
For example, following the definition, 
</p> 

<pre class="emlist"> 
def m (a, b, c = nil, * rest) 
   lvar1 = nil 
end 
</pre> 

<p> 
Local variables are as follows ID allocated. 
</p> 

<pre class="emlist"> 
0 1 2 3 4 5 6 
$ _ $ ~ A b c rest lvar1 
</pre> 

<p> 
I? Based on this, a look at the code. 
</p> 

<p class="caption"> ▼ <code> rb_call0 () </code> - <code> NODE_SCOPE </code> - assignment argument </p> 
<pre class="longlist"> 
4601 if (nd_type (body) == NODE_ARGS) (/ * * No body / 
4602 node = body; / * NODE_ARGS * / 
4603 body = 0; / * * method bodies / 
4604) 
4605 else if (nd_type (body) == NODE_BLOCK) (/ * body * / 
4606 node = body-&gt; nd_head; / * NODE_ARGS * / 
4607 body = body-&gt; nd_next; / * * method bodies / 
4608) 
4609 if (node) (/ * * some parameters / 
4610 if (nd_type (node)! = NODE_ARGS) ( 
4611 rb_bug ( "no argument-node"); 
4612) 
4613 
4614 i = node-&gt; nd_cnt; 
4615 if (i&gt; argc) ( 
4616 rb_raise (rb_eArgError, "wrong number of arguments (% d for% d)", 
4617 argc, i); 
4618) 
4619 if (node-&gt; nd_rest == -1) (/ * rest parameters * / 
               / * * Count the number of parameters / 
4620 int opt = i; / * number of parameters (i is nd_cnt) * / 
4621 NODE * optnode = node-&gt; nd_opt; 
4622 
4623 while (optnode) ( 
4624 opt + +; 
4625 optnode = optnode-&gt; nd_next; 
4626) 
4627 if (opt <argc) (="" 4628="" rb_raise="" (rb_eargerror,="" 4629="" "wrong="" number="" of="" arguments="" (%="" d="" for%="" d)",="" argc,="" opt);="" 4630)="" *="" rb_call0="" second="" assignment,="" 4631="" ruby_frame-=""> argc = opt; 
4632 ruby_frame-&gt; argv = local_vars +2; 
4633) 
4634 
4635 if (local_vars) (/ * * parameters / 
4636 if (i&gt; 0) (/ * * normal parameters / 
4637 / __ * $ $ to the region in order to dodge +2 * / 
4638 MEMCPY (local_vars +2, argv, VALUE, i); 
4639) 
4640 argv + = i; argc -= i; 
4641 if (node-&gt; nd_opt) (/ * * options parameters / 
4642 NODE * opt = node-&gt; nd_opt; 
4643 
4644 while (opt &amp; &amp; argc) ( 
4645 assign (recv, opt-&gt; nd_head, * argv, 1); 
4646 argv + +; argc -; 
4647 opt = opt-&gt; nd_next; 
4648) 
4649 if (opt) ( 
4650 rb_eval (recv, opt); 
4651) 
4652) 
4653 local_vars = ruby_scope-&gt; local_vars; 
4654 if (node-&gt; nd_rest&gt; = 0) (/ * rest parameters * / 
4655 VALUE v; 
4656 
                   / * Exactly zero of the array of arguments to the variable * / 
4657 if (argc&gt; 0) 
4658 v = rb_ary_new4 (argc, argv); 
4659 else 
4660 v = rb_ary_new2 (0); 
4661 ruby_scope-&gt; local_vars [node-&gt; nd_rest] = v; 
4662) 
4663) 
4664) 

(eval.c) 
</argc)></pre> 


<p> 
Comments from a generous amount ever in looking at and we've been a steady pursuit of 
ERE if they are doing it. 
</p> 

<p> 
I was the one <code> ruby_frame </code>-<code> argc </code> and <code> argv </code> to be. rest parameters 
Not only update the like, but why not the rest parameters 
Need to do? 
</p> 

<p> 
This is <code> argc </code> and <code> argv </code> useful to think of things. This is actually a member 
The argument <code> super </code> for a man. This means following form. 
</p> 

<pre class="emlist"> 
super 
</pre> 

<p> 
This <code> super </code> is currently running as a method parameter hand over work 
KIGA. At that time you can give to <code> ruby_frame-&gt; argv </code> arguments to keep it 
Beast. 
</p> 

<p> 
Write back to the original story, rest when you have the parameters <code> super </code>, the original argument Limited 
It is convenient to pass the sort of strike is likely to feel it. Not when the Op 
Applications will be assigned after the parameters of what it is I do not think so. 
</p> 

<pre class="emlist"> 
def m (a, b, * rest) 
   Perhaps super # 5, 6, 7, 8 to be passed 
end 
m (5, 6, 7, 8) 

def m (a, b = 6) 
   Perhaps super # 5, 6 to be passed 
end 
m (5) 
</pre> 

<p> 
This is "I must be" rather than as either good or specifications, 
The problem. If you have any method parameters rest of the superclass 
But the parameters are also believed to rest, compiled after a pass value 
Inconveniences may become very expensive. 

</p><p> 
Now, many methods are said to start this story is all over. 
After the closing of this chapter is now the subject of <code> super </code>, looking at implementation 
Especially. 
</p> 



<h3> <code> super </code> </h3> 

<p> 
<code> super </code> to respond to the <code> NODE_SUPER </code> and <code> NODE_ZSUPER </code>. 
<code> NODE_SUPER </code> is a simple <code> super </code>, 
<code> NODE_ZSUPER </code> None of the arguments <code> super </code>. 
</p> 

<p class="caption"> ▼ <code> rb_eval () </code> - <code> NODE_SUPER </code> </p> 
<pre class="longlist"> 
2780 case NODE_SUPER: 
2781 case NODE_ZSUPER: 
(2782 
2783 int argc; VALUE * argv; / * used in SETUP_ARGS * / 
2784 TMP_PROTECT; 
2785 
                   / * (A) super if you are prohibited * / 
2786 if (ruby_frame-&gt; last_class == 0) ( 
2787 if (ruby_frame-&gt; orig_func) ( 
2788 rb_name_error (ruby_frame-&gt; last_func, 
2789 "superclass method`% s' disabled ", 
2790 rb_id2name (ruby_frame-&gt; orig_func)); 
2791) 
2792 else ( 
2793 rb_raise (rb_eNoMethodError, 
                                    "super called outside of method"); 
2794) 
2795) 
                   / * (B) or prepare arguments rating * / 
2796 if (nd_type (node) == NODE_ZSUPER) ( 
2797 argc = ruby_frame-&gt; argc; 
2798 argv = ruby_frame-&gt; argv; 
2799) 
2800 else ( 
2801 BEGIN_CALLARGS; 
2802 SETUP_ARGS (node-&gt; nd_args); 
2803 END_CALLARGS; 
2804) 
2805 
                   / * (C) still a mystery PUSH_ITER () * / 
2806 PUSH_ITER (ruby_iter-&gt; iter? ITER_PRE: ITER_NOT); 
2807 SET_CURRENT_SOURCE (); 
2808 result = rb_call (RCLASS (ruby_frame-&gt; last_class) -&gt; super, 
2809 ruby_frame-&gt; self, ruby_frame-&gt; orig_func, 
2810 argc, argv, 3); 
2811 POP_ITER (); 
2812) 
2813 break; 

(eval.c) 
</pre> 


<p> 
None of the arguments <code> super </code>, <code> ruby_frame-&gt; argv </code> as the argument 
Said, but (B) as it emerged. 
</p> 

<p> 
(C) <code> rb_call () </code> call just before <code> PUSH_ITER () </code>. This theory is also more 
It is not clear, and thus keep the current method was passed along to block 
Leave again the following method (that is now called super-class method) 
Delegates. 
</p> 

<p> 
And finally (A) <code> ruby_frame-&gt; last_class </code> is 0 when <code> super </code> of 
Calling the ban. Error messages are 
"<code> Must be enabled by rb_enable_super () </code>" 
The film is, <code> rb_enable_super () </code> to call to get the word NARURASHII. 
Why? 
</p> 

<p> 
First of all <code> last_class </code> 0 is what you get when you examine it, I was real 
C, defined in the method (<code> NODE_CFUNC </code>) and I said to be running. 
In addition to such methods <code> alias </code> or replaced or when the same. 
</p> 

<p> 
So far, but found that the source code, but insist that read more 
Do not know. Since no choice but do not know <code> ruby </code> log mailing list 
"<code> Rb_enable_super </code>" discovered in the search. The Mail said the following 
KOTORASHII. 
</p> 

<p> 
For example <code> String.new </code> method. Of course, to generate a string method 
DE. <code> String.new </code> is <code> T_STRING </code> to make the structure. Therefore <code> String </code> of 
The receiver is always an instance method <code> T_STRING </code> is expected to be written. 
</p> 

<p> 
Now, <code> String.new </code>-<code> super </code> is <code> Object.new </code>. <code> Object.new </code> is 
<code> T_OBJECT </code> to make the structure. , <code> String.new </code> to replace the definition <code> super </code> and 
What will become of those. 
</p> 

<pre class="emlist"> 
def String.new 
   super 
end 
</pre> 

<p> 
As a result of the structure is <code> T_OBJECT </code> But class is <code> String </code>, the object is 
. But <code> String </code> methods <code> T_STRING </code> hope that the structure of the writing 
Deserves fall. 
</p> 

<p> 
How to avoid it, or do I say that a different structure in the hope that the media 
Method is described as like I do. But the method is "expected structure" 
I have no information, no class. For example <code> String </code> class 
<code> T_STRING </code> how to get in if he could check before calling, but I think that 
Is not possible at this time. So as the second best "C from the method defined 
<code> super </code> is prohibited, "they have. Then, C-level hierarchical method 
Let's lock down, you can make it not. And "absolute 
It's okay to <code> super </code> I hope that "if the <code> rb_enable_super () </code> to 
You should call <code> super </code> there will be. 
</p> 

<p> 
YOUSURUNI root of the problem is the structure of the mismatch. 
AROKESHONFUREMUWAKU occurred in the same issue. 
</p> 

<p> 
That solution is what should I do or say, the root of the problem, "Kula 
Is not an instance of the structure not know "to resolve that I do. But it 
But there is a new API from the need to be more thorough about it compatible with 
Lose. So right now it is not the final solution is not always 
. 


</p><hr>
<p>
The original work is Copyright © 2002 - 2004 Minero AOKI.<br>
Translations,&nbsp; additions,&nbsp; and graphics by C.E. Thornton<br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="images/somerights20.jpg"></a><br>This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike2.5 License</a>.
</p>

